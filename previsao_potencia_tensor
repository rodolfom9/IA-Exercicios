import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Carregar dados
df = pd.read_csv('auto-mpg.csv')
print("Primeiras 5 linhas:")
print(df.head())

# Limpar dados
df = df.replace('?', np.nan)
df['horsepower'] = pd.to_numeric(df['horsepower'])
df.dropna(inplace=True)

# Preparar dados
features = ['mpg', 'cylinders', 'displacement', 'weight', 'acceleration', 'model year']
X = df[features].values
y = df['horsepower'].values

# Dividir dados (70% treino)
np.random.seed(42)
indices = np.random.permutation(len(X))
train_size = int(0.7 * len(X))

X_train = X[indices[:train_size]]
X_test = X[indices[train_size:]]
y_train = y[indices[:train_size]]
y_test = y[indices[train_size:]]

# Normalizar
X_mean = np.mean(X_train, axis=0)
X_std = np.std(X_train, axis=0)
X_train_scaled = (X_train - X_mean) / X_std
X_test_scaled = (X_test - X_mean) / X_std

print(f"\nDados: {X_train.shape[0]} treino, {X_test.shape[0]} teste")

# Criar modelo
model = Sequential([
    Dense(100, activation='relu', input_shape=(6,)),
    Dense(50, activation='relu'),
    Dense(1)
])

model.compile(optimizer='adam', loss='mse')

# Treinar
print("\nTreinando...")
model.fit(X_train_scaled, y_train, epochs=100, batch_size=32, verbose=0)
print("Treinamento concluído!")

# Avaliar modelo
y_pred_train = model.predict(X_train_scaled, verbose=0).flatten()
y_pred_test = model.predict(X_test_scaled, verbose=0).flatten()

# Calcular R² e MSE
def r2_score(y_true, y_pred):
    ss_res = np.sum((y_true - y_pred) ** 2)
    ss_tot = np.sum((y_true - np.mean(y_true)) ** 2)
    return 1 - (ss_res / ss_tot)

def mse(y_true, y_pred):
    return np.mean((y_true - y_pred) ** 2)

r2_train = r2_score(y_train, y_pred_train)
r2_test = r2_score(y_test, y_pred_test)
mse_train = mse(y_train, y_pred_train)
mse_test = mse(y_test, y_pred_test)

print(f"R² no conjunto de TREINO: {r2_train:.4f}")
print(f"R² no conjunto de TESTE: {r2_test:.4f}")
print(f"MSE no conjunto de TREINO: {mse_train:.4f}")
print(f"MSE no conjunto de TESTE: {mse_test:.4f}")

# Análise adicional
diferenca_r2 = r2_train - r2_test
print(f"\nDiferença R² (Treino - Teste): {diferenca_r2:.4f}")
if diferenca_r2 < 0.05:
    print("✅ Modelo com baixo overfitting!")
else:
    print("⚠️ Possível overfitting detectado.")

print(f"Modelo explica {r2_test*100:.1f}% da variância nos dados de teste.")

print("\n--- Processo TensorFlow Concluído ---")